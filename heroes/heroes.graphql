type Query{
    heroes: [String]
    attributes: [String]
    roles: [String]
    hero(name: ID!): Hero
    heroByComplexity(complexity: Int!): [Hero]
    compareTwoHeroes(hero_1: ID!,hero_2: ID!,role: String!): Winner
    heroByAttackType(attacktype: String!): [Hero]
    filterHeroes(parentType: Parent!,parameter: String!,minValue: Float!,maxValue: Float!): [Hero]
}

type Hero{
    _id: ID!
    attributes: Attribute
    roles: Role
}

enum Parent {
    attributes
    roles
}

type Winner{
    winner: String!
}

type Attribute{
    basestr: Int
    baseagi: Int
    baseint: Int
    strgain: Float
    agigain: Float
    intgain: Float
    # attack: Attack
    # defence: Defence
    # mobility: Mobility

    # Attack
    basedmg: Float
    attacktype: String
    attackrange: Float

    # Defence
    basearmor: Float
    basemagicres: Float

    # Mobility
    basemovespeed: Float
    turnrate: Float
    daysight: Int
    nightsight: Int
}

# type Attack{
#     basedmg: Float
#     attacktype: String
#     attackrange: Float
# }

# type Defence{
#     basearmor: Float
#     basemagicres: Float
# }

# type Mobility{
#     basemovespeed: Float
#     turnrate: Float
#     daysight: Int
#     nightsight: Int
# }

type Role{
    carry: Int
    nuker: Int
    initiator: Int
    disabler: Int
    durable: Int
    escape: Int
    support: Int
    pusher: Int
    jungler: Int
    complexity: Int
}